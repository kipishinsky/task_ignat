{"version":3,"sources":["Components/cloud/Cloud.module.css","Components/name/Name.module.css","Components/map/Map.module.css","Components/name/Name.jsx","Components/cloud/Cloud.jsx","Components/map/Map.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Name","a","b","className","s","name","blink","title","SD","console","log","time","Date","getFullYear","getDate","getHours","getMinutes","Cloud","body","avatar","cloud","container","item","contentEditable","Map","ListItem","props","text","value","unikal","qvol","QualitiesList","qualities","map","quality","i","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,KAAO,oBAAoB,OAAS,sBAAsB,MAAQ,qBAAqB,UAAY,yBAAyB,KAAO,sB,gBCArJD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,oBAAoB,kBAAkB,8BAA8B,eAAe,2BAA2B,MAAQ,oBAAoB,QAAU,wB,gBCAxMD,EAAOC,QAAU,CAAC,KAAO,kBAAkB,KAAO,kBAAkB,OAAS,oBAAoB,QAAU,uB,2KCY5FC,I,ECVXC,EAAGC,EDUQF,EAVf,WACM,OACM,yBAAKG,UAAWC,IAAEC,MACd,yBAAKF,UAAaC,IAAEE,OAChB,yBAAKH,UAAWC,IAAEG,OAAlB,sF,gBCHhBC,GAAMP,GAAJ,EAAY,CAAC,EAAG,IAAhB,GAAOC,EAAP,QACNO,QAAQC,IAAI,QAAUT,EAAI,SAAWC,EAAIM,GACzC,IAAMG,EAAK,IAAIC,KACHD,EAAKE,cAAmBF,EAAKG,UAAeH,EAAKI,WAAiBJ,EAAKK,aAuBpEC,MApBf,WACI,OAEQ,yBAAKd,UAAWC,IAAEc,MAEd,yBAAKf,UAAWC,IAAEe,SAElB,yBAAKhB,UAAWC,IAAEgB,OACd,yBAAKjB,UAAWC,IAAEiB,WACd,yBAAKlB,UAAWC,IAAEkB,MAAM,0BAAMC,gBAAgB,IAAtB,sCACxB,yBAAKpB,UAAWC,IAAEkB,MAAlB,2CACA,yBAAKnB,UAAWC,IAAEkB,MAAM,yC,gBCejCE,MAhCf,WACI,SAASC,EAASC,GACjBjB,QAAQC,IAAIgB,GACT,IAAIC,EAAqB,2DAAhBD,EAAME,MAAwBxB,IAAEyB,OAAS,GAClD,OAAO,uBAAG1B,UAAWwB,EAAK,IAAIvB,IAAE0B,MAAOJ,EAAME,OAGjD,SAASG,EAAcL,GACnB,IAAMM,EAAYN,EAAMM,UACxB,OACI,6BACKA,EAAUC,KAAI,SAACC,EAAQC,GAAT,OACX,kBAACV,EAAD,CAAUW,IAAKD,EACLP,MAAOM,QAQjC,OAEQ,yBAAKG,GAAG,UACJ,kBAACN,EAAD,CAAeC,UALT,CAAC,qEAAc,yDAAY,8D,MCAlCM,MAdf,WAEE,OACM,yBAAKnC,UAAU,OAEX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCJQoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.ee643243.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Cloud_body__2gfUf\",\"avatar\":\"Cloud_avatar__2CgmX\",\"cloud\":\"Cloud_cloud__1P72y\",\"container\":\"Cloud_container__16A6v\",\"item\":\"Cloud_item__39XG2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"Name_name__3d_cB\",\"title\":\"Name_title__21Z9M\",\"flashing-border\":\"Name_flashing-border__1fjgz\",\"printed-text\":\"Name_printed-text__1S90d\",\"blink\":\"Name_blink__1OQzY\",\"blinker\":\"Name_blinker__10F_L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Map_body__2LG4-\",\"qvol\":\"Map_qvol__22iL4\",\"unikal\":\"Map_unikal__2tvqC\",\"slidein\":\"Map_slidein__1pwXr\"};","import React from 'react';\nimport s from './Name.module.css';\n\nfunction Name  ()  {\n      return (\n            <div className={s.name}>\n                <div className = {s.blink}>\n                    <div className={s.title}>Hi, thanks for visiting my page. My name is Sergey. I am a FRONT-END developer!</div>\n                </div>\n             </div>\n      );\n}\n\nexport default Name;\n","import React from 'react';\nimport s from './Cloud.module.css';\n\nvar a, b;\nvar SD = [a, b] = [1, 2];\nconsole.log(\"A is \" + a + \" B is \" + b + SD);\nconst time=new Date();\nconst data= time.getFullYear()+\"г \"+time.getDate()+\"д \"+time.getHours()+\"ч \"+ time.getMinutes()+\"м \"\n;\n\nfunction Cloud() {\n    return (\n\n            <div className={s.body}>\n\n                <div className={s.avatar}>\n                </div>\n                <div className={s.cloud}>\n                    <div className={s.container}>\n                        <div className={s.item}><span contentEditable=\"\">DEVELOPMENT CORPORATION FRONT-END</span></div>\n                        <div className={s.item}>Welcome to the first lesson from Ignat.</div>\n                        <div className={s.item}><p>01:10</p></div>\n                    </div>\n                </div>\n            </div>\n\n\n    );\n}\n\nexport default Cloud;\n","import React from 'react';\nimport s from './Map.module.css';\n\n\nfunction Map() {\n    function ListItem(props) {\n     console.log(props)\n        let text=props.value === \"Комуннист\" ? s.unikal : \"\";\n        return <p className={text+' '+s.qvol}>{props.value}</p>;\n    }\n\n    function QualitiesList(props) {\n        const qualities = props.qualities;\n        return (\n            <div>\n                {qualities.map((quality,i) =>\n                    <ListItem key={i}\n                              value={quality} />\n                )}\n            </div>\n        );\n    }\n\n    const qualities = [\"Рационалист\",\"Комуннист\",\"Анимешник\" ];\n\n    return (\n\n            <div id=\"mapDiv\">\n                <QualitiesList qualities={qualities} />\n\n            </div>\n\n\n    );\n}\n\nexport default Map;\n","import React from 'react';\nimport Name from \"./Components/name/Name\";\nimport Cloud from \"./Components/cloud/Cloud\";\nimport Map from \"./Components/map/Map\";\n\n\nimport './App.css';\n// import Particles from \"react-particles-js\";\n\nfunction App() {\n\n  return (\n        <div className=\"App\">\n\n            <Name/>\n            <Cloud/>\n            <Map/>\n\n        </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}